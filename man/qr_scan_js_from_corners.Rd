% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qr_js.R
\name{qr_scan_js_from_corners}
\alias{qr_scan_js_from_corners}
\title{Scan an image within a restricted geometry context.}
\usage{
qr_scan_js_from_corners(mgk, code_pts)
}
\arguments{
\item{mgk}{A magick image object.}

\item{code_pts}{A dataframe of columns \strong{x} and \strong{y}, with each row identifying a QR pattern corner, usually generated by \code{qr_scan_cpp_magick}.}
}
\value{
If decodable, a list with metadata about the identified QR code.
}
\description{
This function is usually only called by \code{qr_scan}, when a pattern is
detected, but decoding it fails. It crops the original image to the 
neighborhood of pixels targeting the patterns, and re-scans only that region
using the JS library. If your images are particularly high-resolution, this
will resize them to 50\%, which seems to increase the chances of recognition.
}
\details{
The algorithm used here was originally developed to identify QR codes on
white printed sheets in outdoor images, so images are progressively darkened
to recover data in overexposed regions. You may need to view the source of
this function to get a template for developing your own algorithm in other
lighting conditions. For example, \code{\link{image_threshold}} with
\code{(..., type = "white")} to lighten dark images, or
\code{\link{image_morphology}} with \code{(..., morphology = "Open",
kernel = "Square:7")}. A more thoughtful API for developing these algorithms
is a work in progress.
}
