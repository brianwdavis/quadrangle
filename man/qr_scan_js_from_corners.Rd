% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qr_js.R
\name{qr_scan_js_from_corners}
\alias{qr_scan_js_from_corners}
\title{Scan an image within a restricted geometry context.}
\usage{
qr_scan_js_from_corners(
  mgk,
  code_pts,
  lighten = FALSE,
  darken = TRUE,
  verbose = interactive()
)
}
\arguments{
\item{mgk}{A \pkg{magick} image object.}

\item{code_pts}{A dataframe of columns \strong{x} and \strong{y}, with each row identifying a QR pattern corner, usually generated by \code{qr_scan_cpp_magick}.}

\item{lighten}{Logical. Should under-exposed areas of the image be lightened to increase contrast? Useful for images in shadow. Default \code{FALSE}.}

\item{darken}{Logical. Should over-exposed areas of the image be darkened to increase contrast? Useful for images in bright light. Default \code{TRUE}.}

\item{verbose}{Logical. Should warnings print for potentially slow operations?}
}
\value{
If decodable, a list with metadata about the identified QR code.
}
\description{
This function is usually only called by \code{qr_scan}, when a pattern is
detected, but decoding it fails. It crops the original image to the 
neighborhood of pixels targeting the patterns, and re-scans only that region
using the JS library. If your images are particularly high-resolution, this
will resize them to 50\%, which seems to increase the chances of recognition.
}
\details{
This uses a double-\code{while} loop that progressively pushes mid-brightness
pixels to pure black, and if that fails, progressively pushes mid-brightness
pixels to pure white. This algorithm was developed for identifying QR codes
on white printed sheets in outdoor images, in bright sun with or without
shadows. To speed up scanning, you can use arguments \code{lighten = F,
darken = F} which will skip any thresholding. If you use both \code{lighten = T, darken = T},
scanning may be quite slow until a decodable QR code is found. In those cases,
a progress bar will attempt to be shown, if you have the \pkg{progress}
package (\url{https://github.com/r-lib/progress}) available on your machine.

To BYO algorithm, you can use this function as a template. For example,
\code{\link{image_morphology}} with \code{(..., morphology = "Open", kernel =
"Square:n")} (varying \code{n} from 2 to 10) may repair corrupted QR blocks.
}
