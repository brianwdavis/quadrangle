% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qr_scan.R
\name{qr_scan}
\alias{qr_scan}
\title{Scan a file or image for QR codes.}
\usage{
qr_scan(image, flop = T, lighten = F, darken = T, plot = F,
  force_js = F, no_js = F, verbose = interactive())
}
\arguments{
\item{image}{A path to a \pkg{magick}-readable file, e.g. jpg or png, or a \pkg{magick} object.}

\item{flop}{Logical. Should the image be mirrored L-R before reading?}

\item{lighten}{Logical. Should under-exposed areas of the image be lightened to increase contrast? Useful for images in shadow. Default \code{FALSE}.}

\item{darken}{Logical. Should over-exposed areas of the image be darkened to increase contrast? Useful for images in bright light. Default \code{TRUE}.}

\item{plot}{Logical. Should the image with any detected codes be shown after reading? (Requires ggplot2)}

\item{force_js}{Logical. Should the JS library run even if the C++ library is able to read the code?}

\item{no_js}{Logical. Never use the JS library, even if no QR codes are decoded.}

\item{verbose}{Logical. Should warnings print for potentially slow operations?}
}
\value{
A list of dataframes, \strong{values} and \strong{points}, each with a column \strong{id}.
}
\description{
\code{qr_scan} reads in an image file or \pkg{magick} image object and first
tries to read it using the C++ engine, which is fast and robust at locating
the alignment patterns. However, it is less robust at decoding. If no codes
can be read, the image and corners are passed to the JS engine, which is
slower but has a higher success rate on cropped images.
}
\details{
This function calls \code{\link{qr_scan_cpp}} and possibly
\code{\link{qr_scan_js_from_corners}}. Each function has a
double-\code{while} loop that progressively pushes mid-brightness pixels to
pure black, and if that fails, progressively pushes mid-brightness pixels to
pure white. This algorithm was developed for identifying QR codes on white
printed sheets in outdoor images, in bright sun with or without shadows. To
speed up scanning, you can use arguments \code{lighten = F, darken = F} which
will skip any thresholding. If you use both \code{lighten = T, darken = T},
scanning may be quite slow until a decodable QR code is found. In those cases,
a progress bar will attempt to be shown, if you have the \pkg{progress}
package (\url{https://github.com/r-lib/progress}) available on your machine.

To BYO algorithm, you can use those two functions as templates. For example,
\code{\link{image_morphology}} with \code{(..., morphology = "Open", kernel =
"Square:n")} (varying \code{n} from 2 to 10) may repair corrupted QR blocks.
}
